{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Porque o projeto foi desenvolvido? Esse projeto tem como objetivo elaborar uma API RESTfull capaz de cadastrar e autenticar usu\u00e1rios. E dockernizar esse projeto para ser facilmente acess\u00edvel. Tecnologias utilizadas FASTAPI (framework em python para desenvolvimento de APIs) SWAGGERUI (incluso no fastapi para desenvolvimento autom\u00e1tico de documenta\u00e7\u00e3o) PYDANTIC (m\u00e9todo de tipagem para o python) JWT (m\u00e9todo seguro para transmitir dados de maneira segura) SQLalchemy (ORM para conectar a base de dados) MYSQL (base de dados) Docker (m\u00e9todo de conteineriza\u00e7\u00e3o do aplicativo) MKDocs (maneira de fazer documenta\u00e7\u00e3o utilizando markdown) Como rodar a aplica\u00e7\u00e3o? Para rodar a aplica\u00e7\u00e3o em a sua m\u00e1quina local \u00e9 apenas necess\u00e1rio utilizar o comando abaixo . docker-compose up e para descer o app fazer docker-compose down Caso voc\u00ea deseje alterar a aplica\u00e7\u00e3o um modelo do docker compose foi desenvolvido para motivos de desenvolvimento.Ele \u00e9 nomeado de docker-composeDEVELOPMENT.tml para utilizar ele \u00e9 necess\u00e1rio fazer os seguintes passos: Clonar o reposit\u00f3rio Na pasta raiz do reposit\u00f3rio copiar o docker-composeDEVELOPMENT para o arquivo docker-compose.yml Com o docker baixado rodar o seguinte comando; docker-compose up --build Com isso voc\u00ea vai ter criado a sua pr\u00f3pria imagem do app, voce pode utilizar agora os comandos docker-compose up e docker-compose down para colocar no ar e retirar do ar sua aplica\u00e7\u00e3o. Como abrir a documenta\u00e7\u00e3o Esse projeto tem dois tipos de documenta\u00e7\u00e3o, uma feita com SWAGGERUI que \u00e9 a documenta\u00e7\u00e3o das apis e uma feita com Mkdocs. Para acessar a primeira quando o projeto estiver rodando acessar a seguite url : http://localhost:8000/docs A segunda voc\u00ea pode acessar pelos srquivos markdown na pasta AppDocumentation/docs ou de maneira mais estruturada voce roda o seguinte comando no terminal dentro da aba appDocumeentation mkdocs serve Com isso abrira uma url em que voce pode ler a documenta\u00e7\u00e3o de forma mais organizada","title":"Home"},{"location":"#porque-o-projeto-foi-desenvolvido","text":"Esse projeto tem como objetivo elaborar uma API RESTfull capaz de cadastrar e autenticar usu\u00e1rios. E dockernizar esse projeto para ser facilmente acess\u00edvel.","title":"Porque o projeto foi desenvolvido?"},{"location":"#tecnologias-utilizadas","text":"FASTAPI (framework em python para desenvolvimento de APIs) SWAGGERUI (incluso no fastapi para desenvolvimento autom\u00e1tico de documenta\u00e7\u00e3o) PYDANTIC (m\u00e9todo de tipagem para o python) JWT (m\u00e9todo seguro para transmitir dados de maneira segura) SQLalchemy (ORM para conectar a base de dados) MYSQL (base de dados) Docker (m\u00e9todo de conteineriza\u00e7\u00e3o do aplicativo) MKDocs (maneira de fazer documenta\u00e7\u00e3o utilizando markdown)","title":"Tecnologias utilizadas"},{"location":"#como-rodar-a-aplicacao","text":"Para rodar a aplica\u00e7\u00e3o em a sua m\u00e1quina local \u00e9 apenas necess\u00e1rio utilizar o comando abaixo . docker-compose up e para descer o app fazer docker-compose down Caso voc\u00ea deseje alterar a aplica\u00e7\u00e3o um modelo do docker compose foi desenvolvido para motivos de desenvolvimento.Ele \u00e9 nomeado de docker-composeDEVELOPMENT.tml para utilizar ele \u00e9 necess\u00e1rio fazer os seguintes passos: Clonar o reposit\u00f3rio Na pasta raiz do reposit\u00f3rio copiar o docker-composeDEVELOPMENT para o arquivo docker-compose.yml Com o docker baixado rodar o seguinte comando; docker-compose up --build Com isso voc\u00ea vai ter criado a sua pr\u00f3pria imagem do app, voce pode utilizar agora os comandos docker-compose up e docker-compose down para colocar no ar e retirar do ar sua aplica\u00e7\u00e3o.","title":"Como rodar a aplica\u00e7\u00e3o?"},{"location":"#como-abrir-a-documentacao","text":"Esse projeto tem dois tipos de documenta\u00e7\u00e3o, uma feita com SWAGGERUI que \u00e9 a documenta\u00e7\u00e3o das apis e uma feita com Mkdocs. Para acessar a primeira quando o projeto estiver rodando acessar a seguite url : http://localhost:8000/docs A segunda voc\u00ea pode acessar pelos srquivos markdown na pasta AppDocumentation/docs ou de maneira mais estruturada voce roda o seguinte comando no terminal dentro da aba appDocumeentation mkdocs serve Com isso abrira uma url em que voce pode ler a documenta\u00e7\u00e3o de forma mais organizada","title":"Como abrir a documenta\u00e7\u00e3o"},{"location":"DEVELOPER/","text":"Como \u00e9 a estrutura de c\u00f3digo Fui inspirado pela estrutura que esta sendo recomendada no seguinte github: best practicies in fast-api A estrutura que eu fiz \u00e1 a seguinte: \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 Dockerfile # dockerfile utilizado para criar a imagme \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 router.py # router das apis \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u251c\u2500\u2500 requirements.py # extens\u00f5es do python \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 AppDocumentation/ \u2502 \u251c\u2500\u2500 amkdocs.yml #configura\u00e7\u00e3o da documenta\u00e7\u00e3o \u2502 \u2514\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500index.MD \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 DEVELOPER.MD \u251c\u2500\u2500 requirements .txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 docker-compose.yml # conteiner docker utilizado para testes \u2514\u2500\u2500 docker-composeDEBELOPMENT.yml #conteiner docker utilizado em desenvolvimento No fim do documento tem a estrutura recomendada: Autentica\u00e7\u00e3o A autentica\u00e7\u00e3o foi feita utilizando JWT nela voce cria um token de acesso passando a informa\u00e7\u00e3o que voc\u00ea quer encode com uma SECRET key um algoritmo de criptografia e coloca uma data de expira\u00e7\u00e3o para revogar a autentica\u00e7\u00e3o.Quando fizer uma requsi\u00e7\u00e3o para esse endpoint ele vai devolver o token JWT que tera a autentica\u00e7\u00e3o. Para acessar os dados que foram criptografados \u00e9 neces\u00e1rio do Token criado, para isso vai verfificar se o Usuario tem um token valido e vera se esse token ja foi expirado. Caso n\u00e3o for nenhum desses dois casos vai prosseguir com o intuito da requisi\u00e7\u00e3o. link para documenta\u00e7\u00e3o de jwt Como fiz o bearer do jwt link documenta\u00e7\u00e3o do jwt Estrutura recomendada no fast-api best practices In this structure, Each package has its own router, schemas, models, etc. fastapi-project \u251c\u2500\u2500 alembic/ \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 router.py # auth main router with all the endpoints \u2502 \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2502 \u251c\u2500\u2500 models.py # database models \u2502 \u2502 \u251c\u2500\u2500 dependencies.py # router dependencies \u2502 \u2502 \u251c\u2500\u2500 config.py # local configs \u2502 \u2502 \u251c\u2500\u2500 constants.py # module-specific constants \u2502 \u2502 \u251c\u2500\u2500 exceptions.py # module-specific errors \u2502 \u2502 \u251c\u2500\u2500 service.py # module-specific business logic \u2502 \u2502 \u2514\u2500\u2500 utils.py # any other non-business logic functions \u2502 \u251c\u2500\u2500 aws \u2502 \u2502 \u251c\u2500\u2500 client.py # client model for external service communication \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u2514\u2500\u2500 posts \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 config.py # global configs \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 exceptions.py # global exceptions \u2502 \u251c\u2500\u2500 pagination.py # global module e.g. pagination \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 auth \u2502 \u251c\u2500\u2500 aws \u2502 \u2514\u2500\u2500 posts \u251c\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 requirements \u2502 \u251c\u2500\u2500 base.txt \u2502 \u251c\u2500\u2500 dev.txt \u2502 \u2514\u2500\u2500 prod.txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 logging.ini \u2514\u2500\u2500 alembic.ini In this structure Store all domain directories inside src folder. src/ : The highest level of an app, contains common models, configs, and constants, etc. src/main.py : Root of the project, which inits the FastAPI app Each package has its own router, schemas, models, etc. router.py : is the core of each module with all the endpoints schemas.py : for pydantic models models.py : for database models service.py : module-specific business logic dependencies.py : router dependencies constants.py : module-specific constants and error codes config.py : e.g. env vars utils.py : non-business logic functions, e.g. response normalization, data enrichment, etc. exceptions.py : module-specific exceptions, e.g. PostNotFound , InvalidUserData Referencia referencia Referencia do mkdocs mkdocs.org . Schemas A \"schema\" is a definition or description of something. Not the code that implements it, but just an abstract description. No caso estamos utilizando schema para modelar como seria os par\u00e2metros que s\u00e3o necess\u00e1rios para passar para cada o modelo da base de dados","title":"Developer"},{"location":"DEVELOPER/#como-e-a-estrutura-de-codigo","text":"Fui inspirado pela estrutura que esta sendo recomendada no seguinte github: best practicies in fast-api A estrutura que eu fiz \u00e1 a seguinte: \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 Dockerfile # dockerfile utilizado para criar a imagme \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 router.py # router das apis \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u251c\u2500\u2500 requirements.py # extens\u00f5es do python \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 AppDocumentation/ \u2502 \u251c\u2500\u2500 amkdocs.yml #configura\u00e7\u00e3o da documenta\u00e7\u00e3o \u2502 \u2514\u2500\u2500 docs/ \u2502 \u251c\u2500\u2500index.MD \u2502 \u251c\u2500\u2500 ... \u2502 \u2514\u2500\u2500 DEVELOPER.MD \u251c\u2500\u2500 requirements .txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 docker-compose.yml # conteiner docker utilizado para testes \u2514\u2500\u2500 docker-composeDEBELOPMENT.yml #conteiner docker utilizado em desenvolvimento No fim do documento tem a estrutura recomendada:","title":"Como \u00e9 a estrutura de c\u00f3digo"},{"location":"DEVELOPER/#autenticacao","text":"A autentica\u00e7\u00e3o foi feita utilizando JWT nela voce cria um token de acesso passando a informa\u00e7\u00e3o que voc\u00ea quer encode com uma SECRET key um algoritmo de criptografia e coloca uma data de expira\u00e7\u00e3o para revogar a autentica\u00e7\u00e3o.Quando fizer uma requsi\u00e7\u00e3o para esse endpoint ele vai devolver o token JWT que tera a autentica\u00e7\u00e3o. Para acessar os dados que foram criptografados \u00e9 neces\u00e1rio do Token criado, para isso vai verfificar se o Usuario tem um token valido e vera se esse token ja foi expirado. Caso n\u00e3o for nenhum desses dois casos vai prosseguir com o intuito da requisi\u00e7\u00e3o. link para documenta\u00e7\u00e3o de jwt Como fiz o bearer do jwt link documenta\u00e7\u00e3o do jwt","title":"Autentica\u00e7\u00e3o"},{"location":"DEVELOPER/#estrutura-recomendada-no-fast-api-best-practices","text":"In this structure, Each package has its own router, schemas, models, etc. fastapi-project \u251c\u2500\u2500 alembic/ \u251c\u2500\u2500 src \u2502 \u251c\u2500\u2500 auth \u2502 \u2502 \u251c\u2500\u2500 router.py # auth main router with all the endpoints \u2502 \u2502 \u251c\u2500\u2500 schemas.py # pydantic models \u2502 \u2502 \u251c\u2500\u2500 models.py # database models \u2502 \u2502 \u251c\u2500\u2500 dependencies.py # router dependencies \u2502 \u2502 \u251c\u2500\u2500 config.py # local configs \u2502 \u2502 \u251c\u2500\u2500 constants.py # module-specific constants \u2502 \u2502 \u251c\u2500\u2500 exceptions.py # module-specific errors \u2502 \u2502 \u251c\u2500\u2500 service.py # module-specific business logic \u2502 \u2502 \u2514\u2500\u2500 utils.py # any other non-business logic functions \u2502 \u251c\u2500\u2500 aws \u2502 \u2502 \u251c\u2500\u2500 client.py # client model for external service communication \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u2514\u2500\u2500 posts \u2502 \u2502 \u251c\u2500\u2500 router.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2502 \u251c\u2500\u2500 constants.py \u2502 \u2502 \u251c\u2500\u2500 exceptions.py \u2502 \u2502 \u251c\u2500\u2500 service.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 config.py # global configs \u2502 \u251c\u2500\u2500 models.py # global database models \u2502 \u251c\u2500\u2500 exceptions.py # global exceptions \u2502 \u251c\u2500\u2500 pagination.py # global module e.g. pagination \u2502 \u251c\u2500\u2500 database.py # db connection related stuff \u2502 \u2514\u2500\u2500 main.py \u251c\u2500\u2500 tests/ \u2502 \u251c\u2500\u2500 auth \u2502 \u251c\u2500\u2500 aws \u2502 \u2514\u2500\u2500 posts \u251c\u2500\u2500 templates/ \u2502 \u2514\u2500\u2500 index.html \u251c\u2500\u2500 requirements \u2502 \u251c\u2500\u2500 base.txt \u2502 \u251c\u2500\u2500 dev.txt \u2502 \u2514\u2500\u2500 prod.txt \u251c\u2500\u2500 .env \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 logging.ini \u2514\u2500\u2500 alembic.ini","title":"Estrutura recomendada no fast-api best practices"},{"location":"DEVELOPER/#in-this-structure","text":"Store all domain directories inside src folder. src/ : The highest level of an app, contains common models, configs, and constants, etc. src/main.py : Root of the project, which inits the FastAPI app Each package has its own router, schemas, models, etc. router.py : is the core of each module with all the endpoints schemas.py : for pydantic models models.py : for database models service.py : module-specific business logic dependencies.py : router dependencies constants.py : module-specific constants and error codes config.py : e.g. env vars utils.py : non-business logic functions, e.g. response normalization, data enrichment, etc. exceptions.py : module-specific exceptions, e.g. PostNotFound , InvalidUserData","title":"In this structure"},{"location":"DEVELOPER/#referencia","text":"referencia Referencia do mkdocs mkdocs.org .","title":"Referencia"},{"location":"DEVELOPER/#schemas","text":"A \"schema\" is a definition or description of something. Not the code that implements it, but just an abstract description. No caso estamos utilizando schema para modelar como seria os par\u00e2metros que s\u00e3o necess\u00e1rios para passar para cada o modelo da base de dados","title":"Schemas"}]}